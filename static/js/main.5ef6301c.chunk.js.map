{"version":3,"sources":["Prompter.js","App.js","reportWebVitals.js","index.js"],"names":["require","Configuration","OpenAIApi","Prompter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFormSubmit","e","preventDefault","formData","FormData","target","formDataObj","fromEntries","entries","console","log","prompt","configuration","apiKey","createCompletion","concat","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","then","response","setState","heading","data","choices","text","state","react_default","a","createElement","Container","Form","onSubmit","Group","className","controlId","Label","Control","type","name","placeholder","Text","Button","variant","size","Card","Body","Title","Component","App","src_Prompter","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"kTAImCA,EAAQ,KAApCC,kBAAeC,cAkFPC,cA9EX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMJI,aAAe,SAAAC,GACXA,EAAEC,iBAEF,IAAMC,EAAW,IAAIC,SAASH,EAAEI,QAChCC,EAAcZ,OAAOa,YAAYJ,EAASK,WAC1CC,QAAQC,IAAIJ,EAAYK,QAExB,IAAMC,EAAgB,IAAItB,EAAc,CACpCuB,OAAQ,wDAEK,IAAItB,EAAUqB,GAEtBE,iBAAiB,iBAAkB,CACxCH,OAAM,6CAAAI,OAA+CT,EAAYK,QACjEK,YAAa,GACbC,WAAY,IACZC,MAAO,EACPC,kBAAmB,EACnBC,iBAAkB,IAEnBC,KAAK,SAACC,GACL7B,EAAK8B,SAAS,CACVC,QAAO,WAAAT,OAAaT,EAAYK,QAChCW,SAAQ,GAAAP,OAAKO,EAASG,KAAKC,QAAQ,GAAGC,WA5B9ClC,EAAKmC,MAAQ,CACTJ,QAAS,8CACTF,SAAU,0BAJL7B,wEAmCT,OACIoC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,iEACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,SAAUtC,KAAKI,cACjB6B,EAAAC,EAAAC,cAACE,EAAA,EAAKE,MAAN,CAAYC,UAAU,OAAOC,UAAU,kBACnCR,EAAAC,EAAAC,cAACE,EAAA,EAAKK,MAAN,4BACAT,EAAAC,EAAAC,cAACE,EAAA,EAAKM,QAAN,CACYC,KAAK,OACLC,KAAK,SACLC,YAAY,8BAExBb,EAAAC,EAAAC,cAACE,EAAA,EAAKU,KAAN,gEAIJd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKN,KAAK,UAAzC,mBAIJX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACgB,EAAA,EAAKC,KAAN,KACInB,EAAAC,EAAAC,cAACgB,EAAA,EAAKE,MAAN,SAAapB,EAAAC,EAAAC,cAAA,cAAMnC,KAAKgC,MAAMJ,QAAjB,KAAb,KACAK,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACgB,EAAA,EAAKJ,KAAN,KACK/C,KAAKgC,MAAMN,qBAtErB4B,aCGRC,MANf,WACE,OACEtB,EAAAC,EAAAC,cAACqB,EAAD,OCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAvD,EAAA,GAAAoB,KAAAmC,EAAAC,KAAA,UAAqBpC,KAAK,SAAAqC,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHvC,EAAAC,EAAAC,cAACF,EAAAC,EAAMuC,WAAP,KACExC,EAAAC,EAAAC,cAACuC,EAAD,QAOJjB","file":"static/js/main.5ef6301c.chunk.js","sourcesContent":["import React from 'react'\nimport { Component } from 'react'\nimport {Container, Form, Button, Card} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nconst {Configuration, OpenAIApi} = require(\"openai\");\n\n\nclass Prompter extends Component{\n    constructor(){\n        super()\n        this.state = {\n            heading: 'The response from the AI will be shown here', \n            response: '... await the response'\n        }\n    }\n    onFormSubmit = e =>{\n        e.preventDefault()\n\n        const formData = new FormData(e.target),\n        formDataObj = Object.fromEntries(formData.entries())\n        console.log(formDataObj.prompt)\n        // OPENAI \n        const configuration = new Configuration({\n            apiKey: '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',\n          });\n          const openai = new OpenAIApi(configuration);\n          \n          openai.createCompletion(\"text-curie-001\", {\n            prompt: `Write a detailed response to the question ${formDataObj.prompt}`,\n            temperature: 0.8,\n            max_tokens: 200,\n            top_p: 1,\n            frequency_penalty: 0,\n            presence_penalty: 0,\n          })\n          .then((response) => {\n            this.setState({\n                heading: `Prompt: ${formDataObj.prompt}`,\n                response: `${response.data.choices[0].text}`\n            })\n          });\n    }\n    render(){\n        return(\n            <div>\n                <Container>\n                    <br/>\n                    <br/>\n                    <h1> Generate Responses To Prompts </h1>\n                    <br />\n                    <h4> Enter a prompt and OpenAI will give you a response</h4>\n                    <br />\n                    <br />\n                    <Form onSubmit={this.onFormSubmit}>\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                            <Form.Label> Enter your prompt </Form.Label>\n                            <Form.Control\n                                        type=\"text\"\n                                        name=\"prompt\"\n                                        placeholder=\"Enter a prompt for OpenAI\"\n                            />\n                            <Form.Text>\n                                Enter as much information as possible for best answers\n                            </Form.Text>\n                        </Form.Group>\n                        <Button variant=\"primary\" size=\"lg\" type=\"submit\">\n                                Get AI Answers\n                        </Button>\n                    </Form>\n                    <br/> \n                    <br/>\n                    <Card>\n                        <Card.Body>\n                            <Card.Title> <h1> {this.state.heading} </h1> </Card.Title>\n                            <hr/>\n                            <br/>\n                            <Card.Text>\n                                {this.state.response}\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                </Container>\n            </div>\n        )\n    }\n}\nexport default Prompter\n\n\n","import React from 'react';\nimport './App.css';\nimport Prompter from './Prompter';\n\nfunction App() {\n  return (\n    <Prompter/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}